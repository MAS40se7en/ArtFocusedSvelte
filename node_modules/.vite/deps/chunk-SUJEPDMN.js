import {
  SvelteComponentDev,
  add_location,
  append_hydration_dev,
  assign,
  attr_dev,
  bubble,
  children,
  claim_svg_element,
  compute_rest_props,
  detach_dev,
  dispatch_dev,
  exclude_internal_props,
  getContext,
  get_spread_update,
  init,
  insert_hydration_dev,
  listen_dev,
  noop,
  run_all,
  safe_not_equal,
  set_svg_attributes,
  svg_element,
  validate_slots
} from "./chunk-P3NELBO7.js";

// node_modules/svelte-radix/dist/ChevronRight.svelte
var file = "C:/Users/monee/Desktop/Data/Portfolio/svelte/webapp1/node_modules/svelte-radix/dist/ChevronRight.svelte";
function create_fragment(ctx) {
  let svg;
  let path;
  let mounted;
  let dispose;
  let svg_levels = [
    { width: (
      /*size*/
      ctx[0]
    ) },
    { height: (
      /*size*/
      ctx[0]
    ) },
    /*$$restProps*/
    ctx[4],
    { role: (
      /*role*/
      ctx[1]
    ) },
    { "aria-label": (
      /*ariaLabel*/
      ctx[3]
    ) },
    { viewBox: "0 0 15 15" },
    { fill: (
      /*color*/
      ctx[2]
    ) },
    { xmlns: "http://www.w3.org/2000/svg" }
  ];
  let svg_data = {};
  for (let i = 0; i < svg_levels.length; i += 1) {
    svg_data = assign(svg_data, svg_levels[i]);
  }
  const block = {
    c: function create() {
      svg = svg_element("svg");
      path = svg_element("path");
      this.h();
    },
    l: function claim(nodes) {
      svg = claim_svg_element(nodes, "svg", {
        width: true,
        height: true,
        role: true,
        "aria-label": true,
        viewBox: true,
        fill: true,
        xmlns: true
      });
      var svg_nodes = children(svg);
      path = claim_svg_element(svg_nodes, "path", {
        "fill-rule": true,
        "clip-rule": true,
        d: true
      });
      children(path).forEach(detach_dev);
      svg_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(path, "fill-rule", "evenodd");
      attr_dev(path, "clip-rule", "evenodd");
      attr_dev(path, "d", "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z");
      add_location(path, file, 28, 2, 555);
      set_svg_attributes(svg, svg_data);
      add_location(svg, file, 9, 0, 271);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, svg, anchor);
      append_hydration_dev(svg, path);
      if (!mounted) {
        dispose = [
          listen_dev(
            svg,
            "click",
            /*click_handler*/
            ctx[5],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "keydown",
            /*keydown_handler*/
            ctx[6],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "keyup",
            /*keyup_handler*/
            ctx[7],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "focus",
            /*focus_handler*/
            ctx[8],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "blur",
            /*blur_handler*/
            ctx[9],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "mouseenter",
            /*mouseenter_handler*/
            ctx[10],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "mouseleave",
            /*mouseleave_handler*/
            ctx[11],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "mouseover",
            /*mouseover_handler*/
            ctx[12],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            svg,
            "mouseout",
            /*mouseout_handler*/
            ctx[13],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
        dirty & /*size*/
        1 && { width: (
          /*size*/
          ctx2[0]
        ) },
        dirty & /*size*/
        1 && { height: (
          /*size*/
          ctx2[0]
        ) },
        dirty & /*$$restProps*/
        16 && /*$$restProps*/
        ctx2[4],
        dirty & /*role*/
        2 && { role: (
          /*role*/
          ctx2[1]
        ) },
        dirty & /*ariaLabel*/
        8 && { "aria-label": (
          /*ariaLabel*/
          ctx2[3]
        ) },
        { viewBox: "0 0 15 15" },
        dirty & /*color*/
        4 && { fill: (
          /*color*/
          ctx2[2]
        ) },
        { xmlns: "http://www.w3.org/2000/svg" }
      ]));
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svg);
      }
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["size", "role", "color", "ariaLabel"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ChevronRight", slots, []);
  const ctx = getContext("iconCtx") ?? {};
  let { size = ctx.size || "24" } = $$props;
  let { role = ctx.role || "img" } = $$props;
  let { color = ctx.color || "currentColor" } = $$props;
  let { ariaLabel = "chevron right" } = $$props;
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function keydown_handler(event) {
    bubble.call(this, $$self, event);
  }
  function keyup_handler(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseenter_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseleave_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseout_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("size" in $$new_props)
      $$invalidate(0, size = $$new_props.size);
    if ("role" in $$new_props)
      $$invalidate(1, role = $$new_props.role);
    if ("color" in $$new_props)
      $$invalidate(2, color = $$new_props.color);
    if ("ariaLabel" in $$new_props)
      $$invalidate(3, ariaLabel = $$new_props.ariaLabel);
  };
  $$self.$capture_state = () => ({
    getContext,
    ctx,
    size,
    role,
    color,
    ariaLabel
  });
  $$self.$inject_state = ($$new_props) => {
    if ("size" in $$props)
      $$invalidate(0, size = $$new_props.size);
    if ("role" in $$props)
      $$invalidate(1, role = $$new_props.role);
    if ("color" in $$props)
      $$invalidate(2, color = $$new_props.color);
    if ("ariaLabel" in $$props)
      $$invalidate(3, ariaLabel = $$new_props.ariaLabel);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    size,
    role,
    color,
    ariaLabel,
    $$restProps,
    click_handler,
    keydown_handler,
    keyup_handler,
    focus_handler,
    blur_handler,
    mouseenter_handler,
    mouseleave_handler,
    mouseover_handler,
    mouseout_handler
  ];
}
var ChevronRight = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { size: 0, role: 1, color: 2, ariaLabel: 3 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ChevronRight",
      options,
      id: create_fragment.name
    });
  }
  get size() {
    throw new Error("<ChevronRight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<ChevronRight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get role() {
    throw new Error("<ChevronRight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set role(value) {
    throw new Error("<ChevronRight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<ChevronRight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<ChevronRight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ariaLabel() {
    throw new Error("<ChevronRight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ariaLabel(value) {
    throw new Error("<ChevronRight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ChevronRight_default = ChevronRight;

export {
  ChevronRight_default
};
//# sourceMappingURL=chunk-SUJEPDMN.js.map
